/*add panel for the visualization*/
AddPanel ( panel = [ 1 ] , sheet = [ "0" ] ) ;
Panel ( 1 ) | AddPanelConfig ( config = [ { "type" : "golden" } ] ) ;
Panel ( 1 ) | AddPanelEvents ( { "onSingleClick" : { "Unfilter" : [ { "panel" : "" , "query" : "<encode>(<Frame> | UnfilterFrame(<SelectedColumn>));</encode>" , "options" : { } , "refresh" : false , "default" : true , "disabledVisuals" : [ "Grid" , "Sunburst" ] , "disabled" : false } ] } , "onBrush" : { "Filter" : [ { "panel" : "" , "query" : "<encode>if((IsEmpty(<SelectedValues>)),(<Frame> | UnfilterFrame(<SelectedColumn>)), (<Frame> | SetFrameFilter(<SelectedColumn>==<SelectedValues>)));</encode>" , "options" : { } , "refresh" : false , "default" : true , "disabled" : false } ] } } ) ;
Panel ( 1 ) | RetrievePanelEvents ( ) ;

/*add data for the visualization*/
Database ( database = [ "2555ec1b-e1a2-4905-91e0-022dc57fc564" ] ) | Select ( Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Studio__Studio , Nominated__Nominated , Genre__Genre , Director__Director ) .as ( [ MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Studio , Nominated , Genre , Director ] ) | Join ( ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) , ( Title , inner.join , Genre ) , ( Title , inner.join , Director ) ) | Distinct ( false ) | Import ( frame = [ CreateFrame ( frameType = [ NATIVE ] , override = [ true ] ) .as ( [ "Movies_FRAME725000" ] ) ] ) ;
Panel ( 1 ) | SetPanelView ( "visualization" ) ;
Frame ( frame = [ Movies_FRAME725000 ] ) | QueryAll ( ) | AutoTaskOptions ( panel = [ "1" ] , layout = [ "Grid" ] ) | Collect ( 2000 ) ;

/*add panel for custom filter*/
AddPanel ( panel = [ 0 ] , sheet = [ "0" ] ) ;
Panel (0) | SetPanelView("default-handle", "<encode>{ "param": true, "json":[
    {
        "label": "Choose Filters",
        "query": "UnfilterFrame(); SetFrameFilter((Director__Director==[<Director__Director>])); SetFrameFilter((MovieBudget>=<Movie__Budget>)); if(<Nominated>, (SetFrameFilter(Nominated == \"Y\");Nominated = true;), (UnfilterFrame(Nominated); Nominated = false;));",
        "listeners": [
            "updateTask"
        ],
        "params": [
			{
                "paramName": "Director__Director",
                "view": {
                    "displayType": "checklist",
                    "attributes": {
                        "multiple": true,
                        "quickselect": true,
                        "searchable": true
                    }
                },
                "model": {
                    "query": "Database ( database = [ \"2555ec1b-e1a2-4905-91e0-022dc57fc564\" ] ) | Select ( Director__Director ) .as ( [ Director ] ) | Distinct ( true ) | Sort ( columns = [ Director__Director ] , sort = [ \"asc\" ] )  | CollectAll();",
                    "valueQuery": "Select ( Director__Director ) | CollectAll();"
                },
                "required": false,
                "link": "instance"
            },
            {
                "paramName": "Nominated",
                "view": {
                    "label": "Filter by following criteria",
                    "displayType": "checkbox",
                    "attributes": {
                        "label": "View nominated movies?",
                        "direction": "left"
                    }
                },
                "model": {
                    "defaultValue": "false",
                    "valueQuery": "if((VariableExists(\"Nominated\") AND Nominated), true, false);"
                },
                "required": false
            },
            {
                "paramName": "Movie__Budget",
                "view": {
                    "displayType": "number",
                    "label": "Minimum Movie Budget:",
                    "attributes": {
                        "multiple": false 
                    }
                },
                "model": {
                    "defaultValue": 0,
					"min": 0,
					"max": 10000000,
					"valueQuery": "Select (round(Min(MovieBudget), noname=[0])) | Iterate() | GrabScalarElement();"
				},
                "required": false
            }
        ],
        "execute": "button"
    }
]}</encode>");
Panel (0) | SetPanelLabel ("Custom Filter");