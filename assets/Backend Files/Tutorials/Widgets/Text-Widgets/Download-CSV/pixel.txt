/* panel defaults */
AddPanel ( panel = [ 0 ] , sheet = [ "0" ] ) ;
Panel ( 0 ) | AddPanelConfig ( config = [ { "type" : "golden" } ] ) ;
Panel ( 0 ) | AddPanelEvents ( { "onSingleClick" : { "Unfilter" : [ { "panel" : "" , "query" : "<encode>(<Frame> | UnfilterFrame(<SelectedColumn>));</encode>" , "options" : { } , "refresh" : false , "default" : true , "disabledVisuals" : [ "Grid" , "Sunburst" ] , "disabled" : false } ] } , "onBrush" : { "Filter" : [ { "panel" : "" , "query" : "<encode>if((IsEmpty(<SelectedValues>)),(<Frame> | UnfilterFrame(<SelectedColumn>)), (<Frame> | SetFrameFilter(<SelectedColumn>==<SelectedValues>)));</encode>" , "options" : { } , "refresh" : false , "default" : true , "disabled" : false } ] } } ) ;
Panel ( 0 ) | RetrievePanelEvents ( ) ;
Panel ( 0 ) | SetPanelView ( "visualization" , "<encode>{"type":"echarts"}</encode>" ) ;
Panel ( 0 ) | SetPanelView ( "pipeline" ) ;

/* database query */
Database ( database = [ "2555ec1b-e1a2-4905-91e0-022dc57fc564" ] ) | Select ( Director__Director , Director__Title_FK , Title__MovieBudget , Title__Revenue_Domestic , Title__Revenue_International , Title__RottenTomatoes_Audience , Title__RottenTomatoes_Critics , Title__Title , Genre__Genre , Genre__Title_FK , Studio__Studio , Studio__Title_FK , Nominated__Nominated , Nominated__Title_FK ) .as ( [ Director , Title_FK , MovieBudget , Revenue_Domestic , Revenue_International , RottenTomatoes_Audience , RottenTomatoes_Critics , Title , Genre , Title_FK_1 , Studio , Title_FK_2 , Nominated , Title_FK_3 ] ) | Join ( ( Title , inner.join , Genre ) , ( Title , inner.join , Director ) , ( Title , inner.join , Studio ) , ( Title , inner.join , Nominated ) ) | Distinct ( false ) | Import ( frame = [ CreateFrame ( frameType = [ NATIVE ] , override = [ true ] ) .as ( [ "Movies_FRAME834455" ] ) ] ) ;
{"name": "Movies_FRAME834455", "type": "NATIVE"}


Panel ( 0 ) | SetPanelView ( "text-widget" , "<encode>{"html":"<body>\n    <!-- Change QueryAll() to a select statement if you do not want all headers in your default frame -->\n    <button class=\"button\" ng-click=\"textWidget.runPixel('Frame () | QueryAll() | ToCsv();')\" type=\"button\" style=\"vertical-align:middle\" >\n        <span>Download</span>\n    </button>\n</body>\n<style>\n    #TextWidget {\n        --button-background-color: #143F5B;\n        --button-text-color: #ffffff;\n    }\n    #TextWidget .button{\n    display: inline-block;\n    border-radius: 4px;\n    background-color: var(--button-background-color);\n    border: none;\n    color: var(--button-text-color);\n    text-align: center;\n    font-size: 28px;\n    padding: 20px;\n    width: 100%;\n    transition: all 0.5s;\n    cursor: pointer;\n    margin: 5px;\n    }\n\n    #TextWidget .button span{\n    cursor: pointer;\n    display: inline-block;\n    position: relative;\n    transition: 0.5s;\n    }\n\n    #TextWidget .button span:after{\n    content: '\\00bb';\n    position: absolute;\n    opacity: 0;\n    top: 0;\n    right: -20px;\n    transition: 0.5s;\n    }\n\n    #TextWidget .button:hover span{\n    padding-right: 25px;\n    }\n\n    #TextWidget .button:hover span:after{\n    opacity: 1;\n    right: 0;\n    }\n</style>","varList":[{"name":"","query":""}],"freeze":false,"loading":true}</encode>" ) ;