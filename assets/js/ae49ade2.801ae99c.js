"use strict";(self.webpackChunkcfg_docs=self.webpackChunkcfg_docs||[]).push([[2870],{43644:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>t,metadata:()=>a,toc:()=>c});var i=s(74848),r=s(28453);const t={sidebar_label:"Using the SDK",sidebar_position:3,slug:"/using-sdk"},o="Using the SEMOSS SDK",a={id:"How To/Establish Connection to CFG Portal/Using the SDK",title:"Using the SEMOSS SDK",description:"Overview",source:"@site/docs/How To/Establish Connection to CFG Portal/Using the SDK.md",sourceDirName:"How To/Establish Connection to CFG Portal",slug:"/using-sdk",permalink:"/documentation/using-sdk",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_label:"Using the SDK",sidebar_position:3,slug:"/using-sdk"},sidebar:"tutorialSidebar",previous:{title:"Packages and Prerequisites",permalink:"/documentation/prerequisites"},next:{title:"SEMOSS Installation",permalink:"/documentation/semoss-installation"}},l={},c=[{value:"Overview",id:"overview",level:2},{value:"Using the SEMOSS SDK",id:"using-the-semoss-sdk-1",level:3},{value:"Environment Variables",id:"environment-variables",level:3},{value:"Using Insights",id:"using-insights",level:4},{value:"Using Pixels",id:"using-pixels",level:4},{value:"Retrieving Models",id:"retrieving-models",level:5},{value:"Querying a Large Language Model",id:"querying-a-large-language-model",level:5},{value:"Running a Database Query",id:"running-a-database-query",level:5},{value:"Logging In",id:"logging-in",level:5},{value:"Logging Out",id:"logging-out",level:5},{value:"Ask LLM with stream",id:"ask-llm-with-stream",level:4}];function d(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"using-the-semoss-sdk",children:"Using the SEMOSS SDK"}),"\n",(0,i.jsx)(n.h2,{id:"overview",children:"Overview"}),"\n",(0,i.jsx)(n.p,{children:"The SEMOSS SDK (Software Developer Kit) gives you access to the data that you have stored inside of your SEMOSS instance. It also allows you to make pixel calls, login, and query LLMs."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#using-the-semoss-sdk",children:"Using the SEMOSS SDK"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#environment-variables",children:"SEMOSS Environment Variables"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#using-insights",children:"Using Insights"})}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"#using-pixels",children:"Using Pixels"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#retrieving-models",children:"Retrieving Models"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#querying-a-large-language-model",children:"Calling a LLM"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#running-a-database-query",children:"Running a Database Query"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#logging-in",children:"Logging In"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"#logging-out",children:"Logging Out"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"using-the-semoss-sdk-1",children:"Using the SEMOSS SDK"}),"\n",(0,i.jsxs)(n.p,{children:["In order to use the SEMOSS SDK, you will need to populate your SEMOSS instance with models, storage catalogs, and databases for use in your project. Learn how to do that in ",(0,i.jsx)(n.a,{href:"../../Get%20Started/Navigation",children:"Navigating SEMOSS"}),"."]}),"\n",(0,i.jsx)(n.h3,{id:"environment-variables",children:"Environment Variables"}),"\n",(0,i.jsxs)(n.p,{children:["The following environment variables are required at the root level of your client directory. They should be defined in ",(0,i.jsx)(n.code,{children:".env"})," and ",(0,i.jsx)(n.code,{children:".env.local"})," files. ",(0,i.jsx)(n.code,{children:".env.local"})," will not already exist in the project and will need to be created. Set the ",(0,i.jsx)(n.code,{children:"ACCESS_KEY"})," and ",(0,i.jsx)(n.code,{children:"SECRET_KEY"})," variables in ",(0,i.jsx)(n.code,{children:".env.local"})," to be the ",(0,i.jsx)(n.a,{href:"/documentation/connecting-to-semoss#generating-access-and-secret-keys",children:"access and secret keys"})," you generated to connect to SEMOSS."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"Screenshot of .env and .env.local file contents",src:s(49771).A+"",width:"1920",height:"337"})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Note"}),"\r\n",(0,i.jsxs)(n.em,{children:["The ",(0,i.jsx)(n.code,{children:".env.local"})," file will appear greyed out. This is because it will be ignored by Git, so the file will not be pushed up with the rest of your work. It is important to avoid tracking this file in Git or pushing its changes to a repository since it was create to contain your access and secret keys."]})]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The example ",(0,i.jsx)(n.code,{children:".env"})," above demonstrates how you would set your environment variables to connect to the SEMOSS server. To connect to a local instance instead, use the following variables:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"    MODULE=/Monolith_Dev\r\n    ENDPOINT=http://localhost:9090\r\n    APP=<APP_ID>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["You can access the ",(0,i.jsx)(n.code,{children:"APP_ID"})," after you host the app in SEMOSS. Your ",(0,i.jsx)(n.code,{children:"APP_ID"})," will be an alphanumerical string at the end of the app URL."]}),"\n",(0,i.jsxs)(n.p,{children:["For example, if the app URL is:\r\n",(0,i.jsx)(n.code,{children:"http://localhost:9090/SEMOSS-ui/packages/client/dist/#/app/75277e50-456e-43f8-8ad7-d03224ebe4da"}),"\r\nthen the ",(0,i.jsx)(n.code,{children:"APP_ID"})," would be ",(0,i.jsx)(n.code,{children:"75277e50-456e-43f8-8ad7-d03224ebe4da"})]}),"\n",(0,i.jsx)(n.p,{children:"You can access the app URL by going to the App Library, navigating to the hosted app, and copying the link from the URL bar in your browser."}),"\n",(0,i.jsx)(n.h4,{id:"using-insights",children:"Using Insights"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.code,{children:"InsightProvider"})," is a wrapper component and provide an ",(0,i.jsx)(n.a,{href:"../../Get%20Started/Key%20Concepts.md#what-is-an-insight",children:"Insight"})," to all of its children.\r\nIn your base app, use the insight provider like so:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"import { InsightProvider } from '@SEMOSS/sdk-react';\r\n\r\nconst App = (props) => {\r\n    const { children } = props;\r\n\r\n    return <InsightProvider>{children}</InsightProvider>;\r\n};\n"})}),"\n",(0,i.jsx)(n.p,{children:"Once the application is wrapped, you can access insights through the useInsight hook."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"import { useInsight } from '@SEMOSS/sdk-react';\r\n\r\nconst Child = (props) => {\r\n    const { children } = props;\r\n\r\n    const {\r\n        /** Track if it is initialized **/\r\n        isInitialized,\r\n        /** Track if the user is authorized **/ isAuthorized,\r\n        /** Any Insight Errors **/\r\n        error,\r\n        /** System information **/\r\n        system,\r\n        /** Actions to update **/\r\n        actions,\r\n    } = useInsight();\r\n\r\n    return <InsightProvider>{children}</InsightProvider>;\r\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"using-pixels",children:"Using Pixels"}),"\n",(0,i.jsxs)(n.p,{children:["you can access it by using ",(0,i.jsx)(n.code,{children:"pixel"})," API calls. Pixel is a domain-specific language used by SEMOSS to access and update data. Below are some examples of how to use a pixel call."]}),"\n",(0,i.jsx)(n.h5,{id:"retrieving-models",children:"Retrieving Models"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"const { actions } = useInsight();\r\n\r\nconst pixel = `MyEngines( engineTypes=[\"MODEL\"]);`\r\nactions.run(pixel)\r\n    .then((response) => {\r\n        const { output, operationType } = response.pixelReturn[0];\r\n        if (operationType.indexOf('ERROR') > -1) {\r\n            throw new Error(output as string)\r\n        }\r\n        if (Array.isArray(output)) {\r\n            console.log(output) // log the models returned\r\n        }\r\n    })\n"})}),"\n",(0,i.jsx)(n.h5,{id:"querying-a-large-language-model",children:"Querying a Large Language Model"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'const { actions } = useInsight();\r\n\r\nconst ask = (question) => {\r\n    const { pixelReturn } = await actions.run(\r\n        `LLM(engine=["${ENGINE}"], command=["<encode>${question}</encode>"]);`,\r\n    );\r\n\r\n    // get the message\r\n    const message = pixelReturn[0].output.response;\r\n    console.log(message);\r\n};\n'})}),"\n",(0,i.jsx)(n.h5,{id:"running-a-database-query",children:"Running a Database Query"}),"\n",(0,i.jsx)(n.p,{children:"SEMOSS Platform provides 2 main ways to query a database."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Generic Pixel Query syntax: This is SEMOSS specific querying syntax which is database agnostic."}),"\n",(0,i.jsx)(n.li,{children:"Native Database Query: This is the way to query based on the native database querying language/dialect."}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"By using the Generic Pixel Query syntax, you can specify:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Select(...)"}),"\n",(0,i.jsx)(n.li,{children:"Filter(...)"}),"\n",(0,i.jsx)(n.li,{children:"Sort(...)"}),"\n",(0,i.jsx)(n.li,{children:"Limit(...)"}),"\n",(0,i.jsx)(n.li,{children:"Offset(...)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["For our movie database here is an example:\r\nDatabase ( database = [ ",(0,i.jsx)(n.code,{children:'"<ENGINE_ID>"'}),' ] ) | Select ( MOVIES__Title ) .as ( [ Title ] ) | Filter ( ( ( MOVIES__Genre == [ "Action-Adventure" , "Comedy-Musical" , "Drama" ] )  AND  ( MOVIES__MovieBudget >= [ 10000 ] ) ) ) | Distinct ( false ) | CollectAll();']}),"\n",(0,i.jsx)(n.p,{children:"This query is selecting all the movie titles that have a MovieBudget greater than 10000 and specific genre."}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["_",(0,i.jsx)(n.strong,{children:"Note"})," When you want to specify a column in a table in the query, you must use the form TABLENAME__COLUMN. Pixel syntax is case sensitive!"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["To run a Native Database Pixel query, you can add your query to this pixel:\r\nDatabase ( database = [ ",(0,i.jsx)(n.code,{children:'"<ENGINE_ID>"'}),' ] ) | Query ( "',(0,i.jsx)("encode",{children:"select * from MOVIES limit 10;"}),'" ) | CollectAll();']}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsxs)(n.p,{children:["_",(0,i.jsx)(n.strong,{children:"Note"})," Your database query may be case sensitive!"]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'const { actions } = useInsight();\r\n\r\nconst getMovies = () => {\r\n    const { pixelReturn } = await actions.query(\r\n        `Database(engine=["${ENGINE}"]) | Select(Movie__Title, Movie__Year) | Collect(-1)`,\r\n    );\r\n\r\n    // get the data\r\n    const data = pixelReturn[0].output;\r\n\r\n    console.log(data);\r\n};\n'})}),"\n",(0,i.jsxs)(n.blockquote,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.em,{children:[(0,i.jsx)(n.strong,{children:"Note"})," For more guidance on the syntax of LLM and database queries, please review the SEMOSS User Guide ",(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.a,{href:"https://semoss.org/SemossDocumentation/#scripting-understanding-pixel",children:"here"})}),"."]})}),"\n"]}),"\n",(0,i.jsx)(n.h5,{id:"logging-in",children:"Logging In"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"const { actions } = useInsight();\r\n\r\nconst login = (username, password) => {\r\n    const success = await actions.login({\r\n        type: 'native',\r\n        username: username,\r\n        password: password,\r\n    });\r\n\r\n    console.log(success);\r\n};\r\n\r\nconst loginWithOauth = (provider: 'ms' ) => {\r\n    const resp = await insight.actions.login({\r\n        type: 'oauth',\r\n        provider: provider\r\n    })\r\n\r\n    console.log(resp)\r\n}\n"})}),"\n",(0,i.jsx)(n.h5,{id:"logging-out",children:"Logging Out"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"const { actions } = useInsight();\r\n\r\nconst logout = (username, password) => {\r\n    const success = await actions.logout();\r\n\r\n    console.log(success);\r\n};\n"})}),"\n",(0,i.jsx)(n.h4,{id:"ask-llm-with-stream",children:"Ask LLM with stream"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:'import { partial, runPixel } from \'@semoss/sdk\';\r\n\r\nconst insight = new Insight();\r\nawait insight.initialize()\r\nconst insightId = insight._store.insightId\r\n\r\nconst askWithStream = async () => {\r\n        let isCollecting = false;\r\n\r\n        const collectMessage = async () => {\r\n            // only continue if response hasn\'t come back from runPixel\r\n            if (!isCollecting) {\r\n                return;\r\n            }\r\n    \r\n            // get the output of partial\r\n            try {\r\n                const output = await partial(insightId);\r\n\r\n                // add the partial\r\n                if (output.message && output.message.total) {\r\n                    setAnswer(output.message.total);\r\n                }\r\n\r\n                // get the next partial of response\r\n                setTimeout(() => collectMessage(), 1000);\r\n            } catch (e) {\r\n                // noop\r\n            }\r\n        }\r\n\r\n        // start collecting\r\n        isCollecting = true;\r\n        \r\n        // initial delay that collects partial of response\r\n        setTimeout(() => collectMessage(), 500);\r\n\r\n        const { errors, pixelReturn } = await runPixel(\r\n            `LLM(engine=["001510f8-b86e-492e-a7f0-41299775e7d9"], command=["<encode>${question}</encode>"]);`,\r\n            insightId,\r\n        );\r\n\r\n         // OR\r\n\r\n        // const response = await  insight.actions.run(\r\n        //     `LLM(engine=[MODEL_ID], command=["<encode>${question}</encode>"]);`,\r\n        //     insightId,\r\n        // )\r\n\r\n        isCollecting = false\r\n    }\n'})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},49771:(e,n,s)=>{s.d(n,{A:()=>i});const i=s.p+"assets/images/env-caf55b8ecc62a2d833804408484ca607.png"},28453:(e,n,s)=>{s.d(n,{R:()=>o,x:()=>a});var i=s(96540);const r={},t=i.createContext(r);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);